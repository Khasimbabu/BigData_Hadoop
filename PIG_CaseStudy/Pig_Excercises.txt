students.txt
=================
John	21	3.89	ewrew
Sally	19	2.56	qwewr
Alice	22	3.76	rewrwer
Doug	19	1.98	vxcbn
Susan	26	3.25	awe334
=============================================

grunt> A = LOAD 'students.txt' AS (name:chararray, age:int, gpa:float);
grunt> describe A;
A: {name: chararray,age: int,gpa: float}

grunt> R = FILTER A by (age>=20) and (gpa>=3.5);

--> PIG is running MapReduce Jobs behind. All of the commands are converted into MapReduce Jobs.

grunt> illustrate; 0R grunt> illustrate R;

grunt> R = FOREACH A GENERATE age,gpa;

grunt> B = GROUP A by age;

grunt> dump B;
(19,{(Doug,19,1.98),(Sally,19,2.56)})
(21,{(John,21,3.89)})
(22,{(Alice,22,3.76)})
(26,{(Susan,26,3.25)})

grunt> describe B;
B: {group: int,A: {(name: chararray,age: int,gpa: float)}}

grunt> C = FOREACH B GENERATE group, A.name;
grunt> dump C;
(19,{(Doug),(Sally)})
(21,{(John)})
(22,{(Alice)})
(26,{(Susan)})

grunt> STORE B into 'outputdir2' USING PigStorage('|');

[khasimbabueai2500@ip-172-31-20-58 PIGFiles]$ pig -x local students.pig

==================================================
Movies Dataset
==================

1) Loading of the file(movies_data dataset) in to PIG.
grunt> movies = LOAD 'movies_data.xls' USING PigStorage(',') AS (id:int, name:chararray, year:int, rating:double, duration:int);
grunt> movies = LOAD 'file:///home/cloudera/Khasimbabu/movies_data.xls' USING PigStorage(',') AS (id:int, name:chararray, year:int, rating:double, duration:int);

grunt> describe movies;
movies: {id: int,name: chararray,year: int,rating: double,duration: int}

--> define schema for stuctured data is recommanded, otherwise it will treated the entire row as one element. It is optional to define a schema.
--> PigStorage is a most basic function used for input and output for PIG.
--> At this point of time, no data is loaded. After dump command the data will be displayed and loaded.
grunt> dump movies;

2) To display Movies greater than 4 rating.
grunt> movies_greater_than_four = FILTER movies BY (float)rating>4.0;

3) Remove the duplicate records
grunt> movies_nodups = DISTINCT movies;

4) How many movies are there in the file. (First we have to do Group By all movies, then run the count function)
grunt> count_all = GROUP movies_nodups ALL;
grunt> total_count = FOREACH count_all GENERATE COUNT(movies.id);
grunt> dump total_count;
grunt> describe count_all;
count_all: {group: chararray,movies: {(id: int,name: chararray,year: int,rating: double,duration: int)}}
grunt> illustrate count_all;

5) Remove the Not Null records
grunt> movies_duration_notnull = FILTER movies by $4 is not null;

--> $4 is represent Fifth column(or we can specify direct schema column name).$0 represents first column. "is not null" means only display not null column data.

6) Longest movie from the dataset
grunt> movies_duration = FOREACH movies_duration_notnull generate name,(double)duration/60;
grunt> describe movies_duration;
movies_duration: {name: chararray,double}

7) Name of highest rated movie in each year.
grunt> movies_from_longest_to_shortest = ORDER movies_duration by $1 DESC;
grunt> longest_movies = LIMIT movies_from_longest_to_shortest 50;
grunt> dump longest_movies;

8) Name of highest rated movie in each year. 
grunt> grouped_by_year = GROUP movies BY year;
grunt> describe grouped_by_year;
grouped_by_year: {group: int,movies: {(id: int,name: chararray,year: int,rating: double,duration: int)}}

grunt> movies_year_highrating = FOREACH grouped_by_year generate group as year, MAX(movies.rating)as high_rating;
grunt> describe movies_year_highrating;
movies_year_highrating: {year: int,high_rating: double}

grunt> join_title = join movies_year_highrating by (year,high_rating), movies by (year,rating);
grunt> describe join_title;
join_title: {movies_year_highrating::year: int,movies_year_highrating::high_rating: double,movies::id: int,movies::name: chararray,movies::year: int,movies::rating: double,movies::duration: int}

grunt> best_movies = FOREACH join_title generate $0 as year,$3 as title, $1 as rating;
grunt> describe best_movies;
best_movies: {year: int,title: chararray,rating: double}
grunt> dump best_movies;

